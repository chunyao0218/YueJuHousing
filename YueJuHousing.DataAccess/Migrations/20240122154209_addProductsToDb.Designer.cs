// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YueJuHousing.DataAccess.Data;

#nullable disable

namespace YueJuHousing.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240122154209_addProductsToDb")]
    partial class addProductsToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YueJuHousing.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "預售屋"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "新成屋"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "中古屋"
                        });
                });

            modelBuilder.Entity("YueJuHousing.Models.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
                    /*基本資料*/
                    b.Property<string>("CommunityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Floor")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("BedRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivingRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BathRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Balcony")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HouseAge")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("HouseOrientation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    /*物件面積*/

                    b.Property<double>("SquareMeters")
                        .HasColumnType("float");

                    b.Property<string>("SquareMetersUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncludeCarSquareMeters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CarSquareMeters")
                        .HasColumnType("float");

                    b.Property<string>("CarSquareMetersUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MainBuildingSquareMeters")
                        .HasColumnType("float");

                    b.Property<double>("SharedBuildingSquareMeters")
                        .HasColumnType("float");

                    b.Property<double>("OutBuildingSquareMeters")
                        .HasColumnType("float");

                    b.Property<string>("LandSquareMetersType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LandSquareMeters")
                        .HasColumnType("float");

                    /*物件售價*/

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("IncludeCarSquarePrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SelfFunding")
                        .HasColumnType("float");

                    b.Property<double>("PercentageSelfFunding")
                        .HasColumnType("float");

                    b.Property<double>("CarSquarePrice")
                        .HasColumnType("float");

                    b.Property<double>("EachSquarePrice")
                        .HasColumnType("float");

                    b.Property<double>("ManageCost")
                        .HasColumnType("float");

                    b.Property<string>("ManageCostType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithRentContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecorationLevel")
                        .HasColumnType("nvarchar(max)");

                    /*生活機能*/

                    b.Property<bool>("CloseConvenienceStore")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseSuperMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseTraditionalMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseDepartmentStore")
                        .HasColumnType("bit");

                    b.Property<bool>("ClosePark")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseSchool")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseHospital")
                        .HasColumnType("bit");

                    b.Property<bool>("CloseNightMarket")
                        .HasColumnType("bit");

                    b.Property<string>("StationOrRoad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationOrRoadType")
                        .HasColumnType("nvarchar(max)");

                    /*特色描述*/

                    b.Property<string>("AdTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ControlDamper")
                        .HasColumnType("bit");

                    b.Property<bool>("ReplanArea")
                        .HasColumnType("bit");

                    b.Property<bool>("FamousSchoolArea")
                        .HasColumnType("bit");

                    b.Property<string>("FeatureDescribe")
                        .HasColumnType("nvarchar(max)");

                    /*照片&影片*/

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatternImageUrl")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                       .HasColumnType("nvarchar(max)");

                    /*聯絡資料*/

                    b.Property<string>("ContactPeopleType")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPeopleName")
                       .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoIntermediaryDisturb")
                        .HasColumnType("bit");

                    b.Property<string>("CellPhoneNumber")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCodePhoneNumber")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineID")
                       .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProtectPhone")
                       .HasColumnType("nvarchar(max)");



                    b.HasKey("Id");

                    b.ToTable("Houses");

                    b.HasData(
                         new
                         {
                             Id = 1,
                             CommunityName = "景安文匯",
                             Address = "新北市中和區",
                             Floor = 3,
                             BedRoom = "3",
                             LivingRoom = "2",
                             BathRoom = "2",
                             Balcony = "1",
                             HouseAge = 5,
                             HouseOrientation = "坐北朝南",
                             SquareMeters = 20,
                             SquareMetersUnit = "坪",
                             IncludeCarSquareMeters = "含車位面積",
                             CarSquareMeters = 7,
                             CarSquareMetersUnit = "坪",
                             Price = 15000000,
                             IncludeCarSquarePrice = "含車位售價",
                             SelfFunding = 300,
                             PercentageSelfFunding = 20,
                             CarSquarePrice = 180,
                             EachSquarePrice = 100,
                             ManageCost = 2000,
                             ManageCostType = "月繳",
                             WithRentContract = "否",
                             DecorationLevel = "簡易裝潢",
                             CloseConvenienceStore = true,
                             CloseSuperMarket = false,
                             CloseTraditionalMarket = false,
                             CloseDepartmentStore = false,
                             ClosePark = true,
                             CloseSchool = true,
                             CloseHospital = false,
                             CloseNightMarket = false,
                             StationOrRoad = "林口站",
                             StationOrRoadType = "公車站",
                             AdTitle = "市場最低價",
                             ControlDamper = true,
                             ReplanArea = true,
                             FamousSchoolArea = true,
                             FeatureDescribe = "",
                             ImageUrl = "",
                             PatternImageUrl = "",
                             VideoUrl = "",
                             ContactPeopleType = "屋主",
                             ContactPeopleName = "陳小明",
                             NoIntermediaryDisturb = true,
                             CellPhoneNumber = "0988888888",
                             AreaCodePhoneNumber = "02",
                             PhoneNumber = "27315698",
                             Email = "kevin87332000@gmail.com",
                             LineID = "h12s12bs",
                             ProtectPhone = "啟用",
                             CategoryId = 1
                         },
                        new
                        {
                            Id = 2,
                            CommunityName = "大安得逸",
                            Address = "台北市大安區",
                            Floor = 5,
                            BedRoom = "2",
                            LivingRoom = "2",
                            BathRoom = "2",
                            Balcony = "1",
                            HouseAge = 6,
                            HouseOrientation = "坐南朝北",
                            SquareMeters = 30,
                            SquareMetersUnit = "坪",
                            IncludeCarSquareMeters = "含車位面積",
                            CarSquareMeters = 7,
                            CarSquareMetersUnit = "坪",
                            Price = 30000000,
                            IncludeCarSquarePrice = "含車位售價",
                            SelfFunding = 600,
                            PercentageSelfFunding = 20,
                            CarSquarePrice = 180,
                            EachSquarePrice = 100,
                            ManageCost = 2000,
                            ManageCostType = "月繳",
                            WithRentContract = "否",
                            DecorationLevel = "簡易裝潢",
                            CloseConvenienceStore = true,
                            CloseSuperMarket = false,
                            CloseTraditionalMarket = false,
                            CloseDepartmentStore = false,
                            ClosePark = true,
                            CloseSchool = true,
                            CloseHospital = false,
                            CloseNightMarket = false,
                            StationOrRoad = "林口站",
                            StationOrRoadType = "公車站",
                            AdTitle = "市場最低價",
                            ControlDamper = true,
                            ReplanArea = true,
                            FamousSchoolArea = true,
                            FeatureDescribe = "",
                            ImageUrl = "",
                            PatternImageUrl = "",
                            VideoUrl = "",
                            ContactPeopleType = "屋主",
                            ContactPeopleName = "陳小明",
                            NoIntermediaryDisturb = true,
                            CellPhoneNumber = "0988888888",
                            AreaCodePhoneNumber = "02",
                            PhoneNumber = "27315698",
                            Email = "kevin87332000@gmail.com",
                            LineID = "h12s12bs",
                            ProtectPhone = "啟用",
                            CategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CommunityName = "中港層峰",
                            Address = "台中市西屯區",
                            Floor = 7,
                            BedRoom = "4",
                            LivingRoom = "2",
                            BathRoom = "3",
                            Balcony = "2",
                            HouseAge = 7,
                            HouseOrientation = "坐東朝西",
                            SquareMeters = 40,
                            SquareMetersUnit = "坪",
                            IncludeCarSquareMeters = "含車位面積",
                            CarSquareMeters = 7,
                            CarSquareMetersUnit = "坪",
                            Price = 20000000,
                            IncludeCarSquarePrice = "含車位售價",
                            SelfFunding = 400,
                            PercentageSelfFunding = 20,
                            CarSquarePrice = 180,
                            EachSquarePrice = 100,
                            ManageCost = 2000,
                            ManageCostType = "月繳",
                            WithRentContract = "否",
                            DecorationLevel = "簡易裝潢",
                            CloseConvenienceStore = true,
                            CloseSuperMarket = false,
                            CloseTraditionalMarket = false,
                            CloseDepartmentStore = false,
                            ClosePark = true,
                            CloseSchool = true,
                            CloseHospital = false,
                            CloseNightMarket = false,
                            StationOrRoad = "林口站",
                            StationOrRoadType = "公車站",
                            AdTitle = "市場最低價",
                            ControlDamper = true,
                            ReplanArea = true,
                            FamousSchoolArea = true,
                            FeatureDescribe = "",
                            ImageUrl = "",
                            PatternImageUrl = "",
                            VideoUrl = "",
                            ContactPeopleType = "屋主",
                            ContactPeopleName = "陳小明",
                            NoIntermediaryDisturb = true,
                            CellPhoneNumber = "0988888888",
                            AreaCodePhoneNumber = "02",
                            PhoneNumber = "27315698",
                            Email = "kevin87332000@gmail.com",
                            LineID = "h12s12bs",
                            ProtectPhone = "啟用",
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
